# Copyright (C) 2025 AIDC-AI
# This project is licensed under the MIT License (SPDX-License-identifier: MIT).

import json
import keyword
import re
from pydantic import Field
from core import mcp, logger
from manager.workflow_manager import workflow_manager
from utils.file_util import download_files


@mcp.tool(name="save_workflow_tool")
async def save_workflow_tool(
    workflow_url: str = Field(description="The workflow to save, must be a URL"),
    uploaded_filename: str = Field(description="Use the name of the uploaded file or a name specified by the user. Must be in English and without a file extension."),
):
    """
    Add or update a workflow to MCP tools.
    """
    def error(msg: str):
        return json.dumps({ "success": False, "error": msg })
    
    try:
        # Valid format: starts with a letter or underscore, followed by letters, digits, or underscores
        pattern = r'^[A-Za-z_][A-Za-z0-9_]*$'
        
        if not re.match(pattern, uploaded_filename):
            return error(
                "The uploaded filename format is invalid: only letters, digits, and underscores are allowed, and it must start with a letter or underscore."
            )
        
        if keyword.iskeyword(uploaded_filename):
            return error(
                f"The uploaded filename cannot be a Python keyword: '{uploaded_filename}'."
            )

        with download_files(workflow_url) as temp_workflow_path:
            return workflow_manager.load_workflow(temp_workflow_path, tool_name=uploaded_filename)
            
    except Exception as e:
        logger.error(f"Failed to save workflow: {e}")
        return error(f"Failed to save workflow: {str(e)}")
        
@mcp.tool(name="reload_workflows_tool")
async def reload_workflows_tool():
    """
    Reload all MCP tools that were generated by workflows.
    """
    return workflow_manager.reload_all_workflows()
        
@mcp.tool(name="list_workflows_tool")
async def list_workflows_tool():
    """
    List all MCP tools that were generated by workflows.
    
    Call this tool when the user wants to list all MCP tools, such as:
    - Query all tools
    - List all MCP tools
    - How many tools are there
    """
    workflow_names = list(workflow_manager.loaded_workflows.keys())
    workflow_names.sort()
    return workflow_names

@mcp.tool(name="remove_workflow_tool")
async def remove_workflow_tool(
    workflow_name: str = Field(description="The name of the workflow to remove"),
):
    """
    Remove an MCP tool that was generated by a workflow.
    """
    return workflow_manager.unload_workflow(workflow_name)
